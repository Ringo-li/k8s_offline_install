# https://github.com/traefik/traefik-helm-chart

# - block:
#     - name: 创建 traefik chart 个性化设置
#       template: src=traefik/values.yaml.j2 dest={{ cluster_dir }}/yml/traefik-values.yaml

#     - name: helm 创建 traefik chart {{ traefik_chart_ver }}
#       shell: "{{ base_dir }}/bin/helm install -n kube-system traefik \
#               -f {{ cluster_dir }}/yml/traefik-values.yaml \
#               {{ base_dir }}/roles/cluster-addon/files/traefik-{{ traefik_chart_ver }}.tgz"
#   run_once: true
#   connection: local
#   when: 'ingress_backend == "traefik"'

- name: 尝试推送离线 nginx-ingress镜像（若执行失败，可忽略）
  copy: src={{ base_dir }}/down/{{ item }} dest=/opt/kube/images/{{ item }}
  loop: "{{ nginx_ingress_offline }}"
  # when: 'nginx_ingress_offline in download_info.stdout'

- name: 获取nginx_ingress离线镜像推送情况
  command: "ls /opt/kube/images"
  register: image_info

- name: 导入 nginx_ingress的离线镜像（若执行失败，可忽略）
  shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ item }}"
  loop: "{{ nginx_ingress_offline }}"
  # when: 'nginx_ingress_offline in image_info.stdout and CONTAINER_RUNTIME == "docker"'

# - name: 导入 nginx_ingress的离线镜像（若执行失败，可忽略）
#   shell: "{{ bin_dir }}/ctr -n=k8s.io images import /opt/kube/images/{{ item }}"
#   loop: "{{ nginx_ingress_offline }}"
#   # when: 'nginx_ingress_offline in image_info.stdout and CONTAINER_RUNTIME == "containerd"'

# - name: 获取nginx_ingress部署yml文件
#   copy: "src={{ base_dir }}/manifests/ingress/nginx-ingress dest={{ cluster_dir }}/yml/"

# # 为避免haproxy和ingress在node上冲突，我们将ingress-controller部署在master上
# - name: 给master创建ingress-controller标签
#   shell: "kubectl label node {{ ansible_eth1['ipv4']['address'] }} ingress-controller-ready=true"
#   when: "inventory_hostname in groups['kube_master']"
#   # debug:  var=ansible_eth1['ipv4']['address']

# - name: 获取主机ip
#   debug:
#     var: groups['kube_node'][0]
#     var: groups['kube_node'][1]



- name: 创建 nginx_ingress部署
  shell: "{{ base_dir }}/bin/kubectl apply -f {{ base_dir }}/manifests/ingress/nginx-ingress/aliyun-ingress-nginx.yaml"
  run_once: true
  connection: local
